@using Microsoft.AspNetCore.Identity
@using ProjectManagementApp.Data
@using ProjectManagementApp.Services
@using ProjectManagementApp.ViewModels
@inject IProjectRoleService ProjectRoleService
@inject UserManager<ApplicationUser> UserManager


@if (Owners.Any() == false)
{
    <MudText Typo="Typo.subtitle2" Color="Color.Warning">There are no users with the "Owner" role - an admin needs to add someone with said role.</MudText>
}
else
{
    <MudSelect T="OwnerSelection" Label="Owner" @bind-Value="@Selection" Required="true" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
        @foreach (var user in Owners)
        {
            <MudSelectItem Value="@(new OwnerSelection(user!.Id, user.UserName))" />
        }
    </MudSelect>
}


@code {
    [Parameter]
    public OwnerSelection? OwnerSelection { get; set; }
    [Parameter]
    public EventCallback<OwnerSelection> OnOwnerChanged { get; set; }
    [Parameter]
    public bool? FilterByRole { get; set; } = false;
    [Parameter]
    public string RoleFilter { get; set; } = "owner";


    private OwnerSelection? selection;
    private OwnerSelection? Selection
    {
        get => selection;
        set
        {
            selection = value;
            OwnerSelection = selection;
            OnOwnerChanged.InvokeAsync(OwnerSelection);
        }
    }

    private IEnumerable<ApplicationUser?> Owners { get; set; } = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {
        if (FilterByRole ?? false)
            Owners = (await ProjectRoleService.GetUsersWithRoleAsync(RoleFilter)).ToList();
        else
            Owners = UserManager.Users.ToList();


        if (OwnerSelection == null && Owners.Any())
        {
            ApplicationUser? user = Owners.FirstOrDefault();
            Selection = new OwnerSelection(user!.Id, user.UserName);
        } 
        else
        {
            Selection = OwnerSelection;
        }
    }
}