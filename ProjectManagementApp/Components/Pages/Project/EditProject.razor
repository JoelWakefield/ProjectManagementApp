@page "/projects/edit/{Id}"
@using Microsoft.AspNetCore.Authorization
@using ProjectManagementApp.Components.Shared
@using ProjectManagementApp.Data
@using ProjectManagementApp.Services
@using ProjectManagementApp.ViewModels
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject ProjectOwnerService ProjectOwnerService
@inject ProjectRoleService ProjectRoleService
@inject ProjectService ProjectService


<PageTitle>@Project?.Name - Edit</PageTitle>

<MudText Typo="Typo.h1" Class="px-6">@Project?.Name</MudText>

@if (Errors != null)
{
    <MudPaper Class="my-6 pa-8">
        <MudText Typo="Typo.caption" Class="px-6">@Errors</MudText>
    </MudPaper>
}

<MudPaper Class="pa-8">
    <MudText Typo="Typo.subtitle1" Color="Color.Primary" Class="px-6">Editable Values</MudText>
    <MudContainer Class="pa-4 align-start">
        <MudTextField Label="Name" @bind-Value="Project!.Name" T="string" Required="true" RequiredError="A project must have a name." />
        <MudTextField Label="Description" @bind-Value="Project!.Description" T="string" Required="true" RequiredError="A project must have a description." />
    </MudContainer>
    <DateTimePicker DateTimeValue="@Project!.ProjectedStart" Label="Projected Start Date" OnDateTimeChanged="ProjectedStartChanged" />
    <DateTimePicker DateTimeValue="@Project!.ProjectedEnd" Label="Projected End Date" OnDateTimeChanged="ProjectedEndChanged" />
    <MudContainer Class="pa-4">
        @if (NoOwners)
        {   
            <MudText Typo="Typo.subtitle2" Color="Color.Warning">There are no users with the "Owner" role - an admin needs to add someone with said role.</MudText>
        }
        else
        {
            <MudSelect T="ProjectOwnerSelection" Label="Owner" @bind-Value="CurrentOwnerSelection" Required="true" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                @foreach (var user in Owners!)
                {
                    <MudSelectItem Value="@(new ProjectOwnerSelection(user.Id, user.UserName))" />
                }
            </MudSelect>
        }
    </MudContainer>
    <MudDivider />
    <MudText Typo="Typo.subtitle1" Color="Color.Primary" Class="px-6">Auto-Filled Values</MudText>
    <LabeledText Label="Actual Start Date" Text="@Project?.ActualStart.ToString()" />
    <LabeledText Label="Actual End Date" Text="@Project?.ActualEnd.ToString()" />
    <LabeledText Label="Total Work Hours" Text="@Project?.TotalWorkHours.ToString()" />
</MudPaper>

<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-4" @onclick="Save">Save</MudButton>


@code {
    [Parameter]
    public string? Id { get; set; }

    public Project? Project { get; set; }
    public IEnumerable<ApplicationUser>? Owners { get; set; }
    public ProjectOwnerSelection? CurrentOwnerSelection { get; set; }
    public ProjectOwnerSelection? OldOwnerSelection { get; set; }
    public string? Errors { get; set; } = null;
    private bool NoOwners = true;

    protected override void OnInitialized()
    {
        if (String.IsNullOrEmpty(Id))
        {
            NavigationManager.NavigateTo($"/projects", true);
        }
        else
        {
            Project = ProjectService.GetProject(Id);
            if (Project == null)
            {
                NavigationManager.NavigateTo($"/projects", true);
            }

            ApplicationUser? user = ProjectOwnerService.GetOwner(Project?.Id);
            if (user != null)
            {
                OldOwnerSelection = new ProjectOwnerSelection(user!.Id, user.UserName);
                CurrentOwnerSelection = OldOwnerSelection;
            }

            Owners = ProjectRoleService.GetUsersWithRole("owner");
            NoOwners = (Owners == null || Owners.Any() == false);
        }
    }

    private void ProjectedStartChanged(DateTime dateTime) => Project!.ProjectedStart = dateTime;
    private void ProjectedEndChanged(DateTime dateTime) => Project!.ProjectedEnd = dateTime;

    public async Task Save() {
        if (String.IsNullOrEmpty(Project!.Name) || CurrentOwnerSelection == null)
        {
            Errors = "Required fields are missing.";
        }
        else
        {
            try
            {
                if (OldOwnerSelection == null || CurrentOwnerSelection.Id != OldOwnerSelection!.Id)
                    await ProjectOwnerService.AssignOwnerAsync(Project.Id!, CurrentOwnerSelection.Id);
                await ProjectService.UpdateProject(Project);
                NavigationManager.NavigateTo($"/projects/details/{Id}", true);
            }
            catch (Exception ex)
            {
                Errors = ex.Message;
            }
        }
    }
}