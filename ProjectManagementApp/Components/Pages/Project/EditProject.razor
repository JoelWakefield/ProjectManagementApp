@page "/projects/edit/{Id}"
@using ProjectManagementApp.Components.Shared
@using ProjectManagementApp.Data
@using ProjectManagementApp.Services
@using ProjectManagementApp.ViewModels
@inject NavigationManager NavigationManager
@inject IProjectOwnerService ProjectOwnerService
@inject IProjectRoleService ProjectRoleService
@* @inject IProjectService ProjectService *@
@inject ProjectHttpClient Http


<PageTitle>@project?.Name - Edit</PageTitle>

<MudText Typo="Typo.h1" Class="px-6">@project?.Name</MudText>

@if (Errors != null)
{
    <MudPaper Class="my-6 pa-8">
        <MudText Typo="Typo.caption" Class="px-6">@Errors</MudText>
    </MudPaper>
}

<MudPaper Class="pa-8">
    @if (project != null)
    {
        <MudTextField Label="Name" @bind-Value="project!.Name" T="string" Required="true" RequiredError="A project must have a name." />
        <MudTextField Label="Description" @bind-Value="project!.Description" T="string" Required="true" RequiredError="A project must have a description." />
        <MudDatePicker Label="Projected Start Date" @bind-Date="start" ShowToolbar="false" Required="true"/>
        <MudDatePicker Label="Projected End Date" @bind-Date="end" ShowToolbar="false" Required="true" />
        <SelectOwner OwnerSelection="CurrentOwnerSelection" OnOwnerChanged="ProjectOwnerChanged" FilterByRole="true" />
    }
</MudPaper>

<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-4" @onclick="SaveAsync">Save</MudButton>


@code {
    [Parameter]
    public string? Id { get; set; }

    private EditProjectVm? project;
    private DateTime? start;
    private DateTime? end;
    // public Project? Project { get; set; }
    public OwnerSelection? CurrentOwnerSelection { get; set; }
    public OwnerSelection? OldOwnerSelection { get; set; }
    public string? Errors { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        if (String.IsNullOrEmpty(Id))
        {
            NavigationManager.NavigateTo($"/projects", true);
        }
        else
        {
            // Project = await ProjectService.GetProjectAsync(Id);
            project = await Http.GetProjectEditAsync(Id);
            if (project == null)
            {
                NavigationManager.NavigateTo($"/projects", true);
            }

            //  set the dates
            start = project!.ProjectedStart.ToDateTime(new TimeOnly());
            end = project!.ProjectedEnd.ToDateTime(new TimeOnly());

            ApplicationUser? user = await ProjectOwnerService.GetOwnerAsync(Id);
            if (user != null)
            {
                OldOwnerSelection = new OwnerSelection(user!.Id, user.UserName);
                CurrentOwnerSelection = OldOwnerSelection;
            }
        }
    }

    private void ProjectOwnerChanged(OwnerSelection selection) => CurrentOwnerSelection = selection;

    public async Task SaveAsync() {
        if (String.IsNullOrEmpty(project!.Name) || CurrentOwnerSelection == null)
        {
            Errors = "Required fields are missing.";
        }
        else
        {
            try
            {
                if (OldOwnerSelection == null || CurrentOwnerSelection.Id != OldOwnerSelection!.Id) {
                    await ProjectOwnerService.AssignOwnerAsync(project.Id!, CurrentOwnerSelection.Id);
                }

                project.ProjectedStart = start.ToDateOnly();
                project.ProjectedEnd = end.ToDateOnly();
                await Http.UpdateProjectAsync(Id!, project);
                NavigationManager.NavigateTo($"/projects/details/{Id}", true);
            }
            catch (Exception ex)
            {
                Errors = ex.Message;
            }
        }
    }
}