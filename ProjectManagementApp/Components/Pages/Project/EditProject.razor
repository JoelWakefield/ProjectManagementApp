@page "/projects/edit/{Id}"
@using Microsoft.AspNetCore.Authorization
@using ProjectManagementApp.Components.Shared
@using ProjectManagementApp.Data
@using ProjectManagementApp.Services
@using ProjectManagementApp.ViewModels
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IProjectOwnerService ProjectOwnerService
@inject IProjectRoleService ProjectRoleService
@inject IProjectService ProjectService


<PageTitle>@Project?.Name - Edit</PageTitle>

<MudText Typo="Typo.h1" Class="px-6">@Project?.Name</MudText>

@if (Errors != null)
{
    <MudPaper Class="my-6 pa-8">
        <MudText Typo="Typo.caption" Class="px-6">@Errors</MudText>
    </MudPaper>
}

<MudPaper Class="pa-8">
    @if (Project != null)
    {
        <MudText Typo="Typo.subtitle1" Color="Color.Primary" Class="px-6">Editable Values</MudText>
        <MudContainer Class="pa-4 align-start">
            <MudTextField Label="Name" @bind-Value="Project!.Name" T="string" Required="true" RequiredError="A project must have a name." />
            <MudTextField Label="Description" @bind-Value="Project!.Description" T="string" Required="true" RequiredError="A project must have a description." />
        </MudContainer>
        <DateTimePicker DateTimeValue="@Project!.ProjectedStart" Label="Projected Start Date" OnDateTimeChanged="ProjectedStartChanged" />
        <DateTimePicker DateTimeValue="@Project!.ProjectedEnd" Label="Projected End Date" OnDateTimeChanged="ProjectedEndChanged" />
        <SelectOwner OwnerSelection="CurrentOwnerSelection" OnOwnerChanged="ProjectOwnerChanged" />
        
        <MudDivider />
        <MudText Typo="Typo.subtitle1" Color="Color.Primary" Class="px-6">Auto-Filled Values</MudText>
        <LabeledText Label="Actual Start Date" Text="@Project?.ActualStart.ToString()" />
        <LabeledText Label="Actual End Date" Text="@Project?.ActualEnd.ToString()" />
        <LabeledText Label="Total Work Hours" Text="@Project?.TotalWorkHours.ToString()" />
    }
</MudPaper>

<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-4" @onclick="SaveAsync">Save</MudButton>


@code {
    [Parameter]
    public string? Id { get; set; }

    public Project? Project { get; set; }
    public ProjectOwnerSelection? CurrentOwnerSelection { get; set; }
    public ProjectOwnerSelection? OldOwnerSelection { get; set; }
    public string? Errors { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        if (String.IsNullOrEmpty(Id))
        {
            NavigationManager.NavigateTo($"/projects", true);
        }
        else
        {
            Project = await ProjectService.GetProjectAsync(Id);
            if (Project == null)
            {
                NavigationManager.NavigateTo($"/projects", true);
            }

            ApplicationUser? user = await ProjectOwnerService.GetOwnerAsync(Project?.Id);
            if (user != null)
            {
                OldOwnerSelection = new ProjectOwnerSelection(user!.Id, user.UserName);
                CurrentOwnerSelection = OldOwnerSelection;
            }
        }
    }

    private void ProjectedStartChanged(DateTime dateTime) => Project!.ProjectedStart = dateTime;
    private void ProjectedEndChanged(DateTime dateTime) => Project!.ProjectedEnd = dateTime;
    private void ProjectOwnerChanged(ProjectOwnerSelection selection) => CurrentOwnerSelection = selection;

    public async Task SaveAsync() {
        if (String.IsNullOrEmpty(Project!.Name) || CurrentOwnerSelection == null)
        {
            Errors = "Required fields are missing.";
        }
        else
        {
            try
            {
                if (OldOwnerSelection == null || CurrentOwnerSelection.Id != OldOwnerSelection!.Id)
                    await ProjectOwnerService.AssignOwnerAsync(Project.Id!, CurrentOwnerSelection.Id);
                await ProjectService.UpdateProjectAsync(Project);
                NavigationManager.NavigateTo($"/projects/details/{Id}", true);
            }
            catch (Exception ex)
            {
                Errors = ex.Message;
            }
        }
    }
}