@page "/projects/create"
@using Microsoft.EntityFrameworkCore
@using ProjectManagementApp.Components.Shared
@using ProjectManagementApp.Data
@using ProjectManagementApp.Services
@using ProjectManagementApp.ViewModels
@using ReactApp.Server.ViewModels
@inject NavigationManager NavigationManager
@inject IProjectRoleService ProjectRoleService
@inject IProjectOwnerService ProjectOwnerService
@inject ProjectHttpClient Http


<PageTitle>Create Project</PageTitle>

<MudText Typo="Typo.h1" Class="px-6">Create Project</MudText>

@if (Errors != null)
{
    <MudPaper Class="my-6 pa-8">
        <MudText Typo="Typo.caption" Class="px-6">@Errors</MudText>
    </MudPaper>
}

<MudPaper Class="pa-8">
    <MudContainer Class="pa-4">
        <MudTextField Label="Name" @bind-Value="project!.Name" T="string" Required="true" RequiredError="A project must have a name." />
        <MudTextField Label="Description" @bind-Value="project!.Description" T="string" Required="true" RequiredError="A project must have a description." />
    </MudContainer>
    <MudContainer Class="pa-4 align-start">
        <MudDatePicker Label="Projected Start Date" @bind-Date="start" ShowToolbar="false" Required="true" />
        <MudDatePicker Label="Projected End Date" @bind-Date="end" ShowToolbar="false" Required="true" />
    </MudContainer>
    <MudContainer Class="pa-4">
        <SelectOwner OwnerSelection="CurrentOwnerSelection" OnOwnerChanged="ProjectOwnerChanged" FilterByRole="true" />
    </MudContainer>
</MudPaper>

<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-4" @onclick="CreateAsync">Create</MudButton>


@code {
    public CreateProjectVm? project { get; set; }
    private DateTime? start;
    private DateTime? end;
    public OwnerSelection? CurrentOwnerSelection { get; set; }
    public string? Errors { get; set; } = null;

    protected override void OnInitialized()
    {
        project = new CreateProjectVm();
    }

    private void ProjectOwnerChanged(OwnerSelection selection) => CurrentOwnerSelection = selection;

    public async Task CreateAsync()
    {
        if (project == null || String.IsNullOrEmpty(project.Name) || CurrentOwnerSelection == null)
        {
            Errors = "Required fields are missing.";
        }
        else
        {
            try
            {
                project.ProjectedStart = start.ToDateOnly();
                project.ProjectedEnd = start.ToDateOnly();
                project.OwnerId = CurrentOwnerSelection.Id;
                var projectId = await Http.CreateProjectAsync(project);
                if (String.IsNullOrEmpty(projectId)) {
                    throw new Exception("Failed to create a new project.");
                } else {
                    await ProjectOwnerService.AssignOwnerAsync(projectId, CurrentOwnerSelection.Id);
                    NavigationManager.NavigateTo($"/projects/details/{projectId}", true);
                }
            }
            catch (Exception ex)
            {
                Errors = ex.Message;
            }
        }
    }
}