@* @using ProjectManagementApp.Components.Shared
@using ProjectManagementApp.Data

<EditForm Model="Model" OnValidSubmit="Create">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField Label="First name" HelperText="Max. 256 characters" @bind-Value="Model.Name" For="@(() => Model.Name)" />
            <MudContainer Class="pa-4">
                <MudTextField Label="Name" Value="Project?.Name" T="string" Required="true" RequiredError="A project must have a name." />
                <MudTextField Label="Description" Value="description" T="string" Required="true" RequiredError="A project must have a description." />
            </MudContainer>
            <DateTimePicker OnDateTimeChanged="ProjectedStartChanged" />
            <DateTimePicker OnDateTimeChanged="ProjectedEndChanged" />
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Create</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>


@code {
    [Parameter] 
    public EventCallback<Project> OnProjectChanged { get; set; }

    [Parameter]
    public DateTime? ProjectedStart { get; set; }
    [Parameter]
    public DateTime? ProjectedEnd { get; set; }

    private class ProjectForm
    {
        [Required]
        [StringLength(256, ErrorMessage = "Name length can't be more than 256 characters.")]
        public string? Name { get; set; }
        [Required]
        [StringLength(256, ErrorMessage = "Name length can't be more than 256 characters.")]
        public string? Description { get; set; }
        [Required]
        [StringLength(256, ErrorMessage = "Name length can't be more than 256 characters.")]
        public DateTime? Start { get; set; }
        [Required]
        [StringLength(256, ErrorMessage = "Name length can't be more than 256 characters.")]
        public DateTime? Name { get; set; }
    }

    private void ProjectedStartChanged(DateTime dateTime) => ProjectedStart = dateTime;
    private void ProjectedEndChanged(DateTime dateTime) => ProjectedEnd = dateTime;

    private void ProjectedStartChanged(DateTime dateTime) => Project!.ProjectedStart = dateTime;
    private void ProjectedEndChanged(DateTime dateTime) => Project!.ProjectedEnd = dateTime;

    protected override void OnInitialized()
    {
        
    }
}
 *@