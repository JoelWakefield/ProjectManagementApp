@page "/phases/edit/{Id}"
@using ProjectManagementApp.Components.Shared
@using ProjectManagementApp.Data
@using ProjectManagementApp.Services
@using ProjectManagementApp.ViewModels
@inject NavigationManager NavigationManager
@inject IPhaseService PhaseService
@inject IPhaseOwnerService PhaseOwnerService


<PageTitle>@Phase?.Name - Edit</PageTitle>

<MudText Typo="Typo.h1" Class="px-6">@Phase?.Name</MudText>

@if (Errors != null)
{
    <MudPaper Class="my-6 pa-8">
        <MudText Typo="Typo.caption" Class="px-6">@Errors</MudText>
    </MudPaper>
}

<MudPaper Class="pa-8">
    @if (Phase != null)
    {
        <MudTextField Label="Name" @bind-Value="Phase!.Name" T="string" Required="true" RequiredError="A Phase must have a name." />
        <MudTextField Label="Description" @bind-Value="Phase!.Description" T="string" Required="true" RequiredError="A Phase must have a description." />
        <MudSelect Label="Priority" @bind-Value="Phase.Priority" Required="true" OpenIcon="@Icons.Material.Filled.PriorityHigh" AdornmentColor="Color.Secondary">
            @foreach (Priority priority in Enum.GetValues(typeof(Priority)))
            {
                <MudSelectItem Value="@priority">@priority</MudSelectItem>
            }
        </MudSelect>
        <SelectOwner OwnerSelection="CurrentOwnerSelection" OnOwnerChanged="PhaseOwnerChanged" />
    }
</MudPaper>

<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-4" @onclick="SaveAsync">Save</MudButton>


@code {
    [Parameter]
    public string? Id { get; set; }

    public Phase? Phase { get; set; }
    public OwnerSelection? CurrentOwnerSelection { get; set; }
    public OwnerSelection? OldOwnerSelection { get; set; }
    public string? Errors { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        try {
            Phase = await PhaseService.GetPhaseAsync(Id);
            var user = await PhaseOwnerService.GetOwnerAsync(Phase.Id);
            CurrentOwnerSelection = new OwnerSelection(user.Id,user.UserName);
        } catch {
            NavigationManager.NavigateTo($"/phases", true);
        }
    }

    private void PhaseOwnerChanged(OwnerSelection selection) => CurrentOwnerSelection = selection;

    public async Task SaveAsync()
    {
        if (String.IsNullOrEmpty(Phase!.Name) || CurrentOwnerSelection == null)
        {
            Errors = "Required fields are missing.";
        }
        else
        {
            try
            {
                if (OldOwnerSelection == null || CurrentOwnerSelection.Id != OldOwnerSelection!.Id)
                    await PhaseOwnerService.AssignOwnerAsync(Phase.Id!, CurrentOwnerSelection.Id);
                await PhaseService.UpdatePhaseAsync(Phase);
                NavigationManager.NavigateTo($"/phases/details/{Id}", true);
            }
            catch (Exception ex)
            {
                Errors = ex.Message;
            }
        }
    }
}