@page "/phases/create/{ProjectId}"
@using ProjectManagementApp.Components.Shared
@using ProjectManagementApp.Services
@using ProjectManagementApp.ViewModels
@using ReactApp.Server.ViewModels
@using ReactApp.Server.Models
@inject NavigationManager NavigationManager
@inject PhaseHttpClient phaseClient
@inject ProjectHttpClient projectClient
@* @inject IPhaseOwnerService PhaseOwnerService *@


<PageTitle>Create Phase</PageTitle>

<MudText Typo="Typo.h1" Class="px-6">Create Phase</MudText>

@if (Errors != null)
{
    <MudPaper Class="my-6 pa-8">
        <MudText Typo="Typo.caption" Class="px-6">@Errors</MudText>
    </MudPaper>
}

<MudPaper Class="pa-8">
    @if(Phase != null)
    {
        <MudTextField Label="Name" @bind-Value="Phase.Name" T="string" Required="true" RequiredError="A phase must have a name." />
        <MudTextField Label="Description" @bind-Value="Phase.Description" T="string" Required="true" RequiredError="A phase must have a name." />
        <MudSelect Label="Priority" @bind-Value="Phase.Priority" Required="true" OpenIcon="@Icons.Material.Filled.PriorityHigh" AdornmentColor="Color.Secondary">
            @foreach (Priority priority in Enum.GetValues(typeof(Priority)))
            {
                <MudSelectItem Value="@priority">@priority</MudSelectItem>
            }
        </MudSelect>
        <MudContainer Class="pa-4">
            <SelectOwner OwnerSelection="CurrentOwnerSelection" OnOwnerChanged="OwnerChanged" />
        </MudContainer>
        <MudContainer Class="pa-4">
            <SelectStage StageSelection="CurrentStageSelection" OnStageChanged="StageChanged" />
        </MudContainer>
    }
</MudPaper>

<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-4" @onclick="SaveAsync">Save</MudButton>


@code {
    [Parameter]
    public string? ProjectId { get; set; }

    public CreatePhaseVm? Phase { get; set; }
    public ProjectVm? Project { get; set; }
    public OwnerSelection? CurrentOwnerSelection { get; set; }
    public StageSelection CurrentStageSelection { get; set; }
    public string? Errors { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        if (String.IsNullOrEmpty(ProjectId))
        {
            NavigationManager.NavigateTo($"/projects", true);
        }
        else
        {
            Project = await projectClient.GetProjectDetailsAsync(ProjectId);

            if (Project == null)
                NavigationManager.NavigateTo($"/projects", true);
            else
                Phase = new CreatePhaseVm
                {
                    ProjectId = ProjectId,
                };
        }
    }

    private void OwnerChanged(OwnerSelection selection) => CurrentOwnerSelection = selection;
    private void StageChanged(StageSelection selection) => CurrentStageSelection = selection;

    public async Task SaveAsync()
    {
        if (String.IsNullOrEmpty(Phase!.Name) || CurrentOwnerSelection == null)
        {
            Errors = "Required fields are missing.";
        }
        else
        {
            try
            {
                Phase.OwnerId = CurrentOwnerSelection.Id;
                Phase.StageId = CurrentStageSelection.Id;
                HttpResponseMessage response = await phaseClient.CreatePhaseAsync(Phase);
                string content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    //  if success, the content will be the ID
                    // await PhaseOwnerService.AssignOwnerAsync(Project.Id!, CurrentOwnerSelection.Id);
                    NavigationManager.NavigateTo($"/phases/details/{content}", true);
                }
                else
                {
                    //  if failed, print errors to user
                    Errors = $"{response.StatusCode.ToString()}: {content}";
                }
            }
            catch (Exception ex)
            {
                Errors = ex.Message;
            }
        }
    }
}