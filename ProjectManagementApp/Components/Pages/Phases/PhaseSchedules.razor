@page "/phases/schedules"
@using Microsoft.AspNetCore.Authorization
@using ProjectManagementApp.Components.Shared
@using ProjectManagementApp.Data
@using ProjectManagementApp.Services
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IPhaseService PhaseService
@inject IPhaseScheduleService PhaseScheduleService


<PageTitle>Phase Schedules</PageTitle>

<MudText Typo="Typo.h1" Class="px-6">Phase Schedules</MudText>

@if (Errors != null)
{
    <MudPaper Class="my-6 pa-8">
        <MudText Typo="Typo.caption" Class="px-6">@Errors</MudText>
    </MudPaper>
}


<MudGrid Class="my-3">
    @foreach (var date in Dates)
    {
        <MudItem Class="pa-0" xs="1">
            <MudContainer
                Class="d-flex justify-center align-center flex-column border-2 border-solid docs-gray-bg mud-border-lines-default">
                <div class="d-flex">@date.Day</div>
                <div class="d-flex">@date.ToString("MMM")</div>
                <div class="d-flex">@date.Year</div>
            </MudContainer>
        </MudItem>
    }
</MudGrid>

@foreach (var item in GanttItems)
{
    <MudGrid Class="my-3">
        @if (item.OnChart)
        {
            @for (int i = 0; i < item.FromStart; i++)
            {
                <MudSpacer />
            }
            <MudItem Class="pa-0" xs="item.Duration">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-3">
                    <MudText Typo="Typo.h6" Align="Align.Center">@($"{item.Start.ToString("dd")} - {item.End.ToString("dd")}")
                    </MudText>
                </MudPaper>
            </MudItem>
            @for (int i = 0; i < item.ToEnd; i++)
            {
                <MudSpacer />
            }
        }
        else
        {
            @for (int i = 0; i < DAYS_DISPLAYED; i++)
            {
                <MudSpacer />
            }
        }
        <MudFlexBreak />
    </MudGrid>
}

@code {
    const int DAYS_DISPLAYED = 12;
    private static DateTime Today = DateTime.UtcNow.Date;
    private static DateTime ChartEnd = Today.AddDays(DAYS_DISPLAYED);

    private IEnumerable<Phase> Phases { get; set; } = new List<Phase>();
    private List<GanttItem> GanttItems { get; set; } = new List<GanttItem>();
    private List<DateTime> Dates { get; set; } = new List<DateTime>();
    private string? Errors { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        Phases = PhaseService.GetAllPhases().ToList();

        for (int i = 0; i < DAYS_DISPLAYED; i++)
        {
            Dates.Add(DateTime.UtcNow.Date.AddDays(i));
        }

        foreach (var phase in Phases)
        {
            GanttItems.Add(new GanttItem(await PhaseScheduleService.GetScheduleAsync(phase.Id)));
        }
    }

    public class GanttItem
    {
        public GanttItem(PhaseSchedule schedule)
        {
            Start = schedule.Start;
            End = schedule.End;
        }

        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public bool OnChart { get => !(Today > End || ChartEnd < Start); }
        public int Duration { get => DAYS_DISPLAYED - FromStart - ToEnd; }
        public int FromStart { get => Start > Today ? (Start - Today).Days : 0; }
        public int ToEnd { get => ChartEnd > End ? (ChartEnd - End).Days : 0; }
    }
}
