@page "/phases/schedules"
@using MudBlazor
@using ProjectManagementApp.Data
@using ProjectManagementApp.Services
@using ProjectManagementApp.ViewModels
@inject NavigationManager NavigationManager
@inject IPhaseScheduleService PhaseScheduleService


<PageTitle>Phase Schedules</PageTitle>

<MudText Typo="Typo.h1" Class="px-6">Phase Schedules</MudText>

@if (Errors != null)
{
    <MudPaper Class="my-6 pa-8">
        <MudText Typo="Typo.caption" Class="px-6">@Errors</MudText>
    </MudPaper>
}


<MudGrid Class="my-3">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ShiftBack" IconSize="Size.Large" StartIcon="@Icons.Material.Filled.ArrowBackIos" />

    @foreach (var date in Dates)
    {
        <MudItem Class="pa-0" xs="1">
            <MudContainer
            Class="d-flex justify-center align-center flex-column border-2 border-solid docs-gray-bg mud-border-lines-default">
                <div class="d-flex">@date.Day</div>
                <div class="d-flex">@date.ToString("MMM")</div>
                <div class="d-flex">@date.Year</div>
            </MudContainer>
        </MudItem>
    }

    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ShiftForward" IconSize="Size.Large" EndIcon="@Icons.Material.Filled.ArrowForwardIos" />
</MudGrid>

@foreach (var item in GanttItems)
{
    <MudSpacer />

    <MudGrid Class="my-3">
        @if (item.OnChart(StartDate, DAYS_DISPLAYED))
        {
            @for (int i = 0; i < item.FromStart(StartDate); i++)
            {
                <MudSpacer />
            }
            <MudItem Class="pa-0" xs="item.Duration(StartDate, DAYS_DISPLAYED)">
                <MudLink @onclick="(() => SelectPhase(item.PhaseId))">
                    <MudPaper Class="d-flex align-center justify-center mud-width-full pa-3" Style="word-break:break-word;">
                        <MudText Typo="Typo.body1" Align="Align.Center">@item.Name</MudText>
                    </MudPaper>
                </MudLink>
            </MudItem>
            @for (int i = 0; i < item.ToEnd(StartDate, DAYS_DISPLAYED); i++)
            {
                <MudSpacer />
            }
        }
        else
        {
            @for (int i = 0; i < DAYS_DISPLAYED; i++)
            {
                <MudSpacer />
            }
        }
    </MudGrid>

    <MudSpacer />
}


@code {
    const int DAYS_DISPLAYED = 10;

    private DateOnly StartDate { get; set; } = DateOnly.FromDateTime(DateTime.UtcNow);

    private IEnumerable<GanttItem> GanttItems { get; set; } = new List<GanttItem>();
    private List<DateOnly> Dates { get; set; } = new List<DateOnly>();
    private string? Errors { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        GanttItems = await PhaseScheduleService.GetGanttItems();
        ShiftDateRange();
    }

    private void ShiftBack() {
        ShiftDateRange(-DAYS_DISPLAYED);
    }

    private void ShiftForward() {
        ShiftDateRange(DAYS_DISPLAYED);
    }

    private void ShiftDateRange(int days = 0) {
        StartDate = StartDate.AddDays(days);
        
        Dates.Clear();
        for (int i = 0; i < DAYS_DISPLAYED; i++)
        {
            Dates.Add(StartDate.AddDays(i));
        }
    }

    private void SelectPhase(string phaseId) => NavigationManager.NavigateTo($"/phases/details/{phaseId}", true);

}
