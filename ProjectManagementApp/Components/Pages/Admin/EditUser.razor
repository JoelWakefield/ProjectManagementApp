@page "/admin/users/{UserId}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using ProjectManagementApp.Data
@using ProjectManagementApp.Services
@attribute [Authorize]
@inject UserManager<ApplicationUser> UserManager
@inject ProjectRoleService ProjectRoleService
@inject NavigationManager NavigationManager


<PageTitle>Edit User</PageTitle>

<MudText Typo="Typo.h1" Class="px-6">Edit User</MudText>

<MudPaper Class="pa-8">
    <MudText Typo="Typo.h2" Class="py-8">Details</MudText>
    <MudText Typo="Typo.body1" Class="pa-4">@User?.UserName</MudText>

    <MudText Typo="Typo.h2" Class="py-4">Roles</MudText>
    <MudList T="string">
        @if (AllRoles != null)
        {
            @foreach (string key in AllRoles?.Keys!)
            {
                <MudCheckBox @onclick="@(() => ToggleRole(key))" @bind-Value="AllRoles[key]" Color="Color.Primary">@key</MudCheckBox>
            }
        }
    </MudList>
</MudPaper>


@code {
    [Parameter]
    public string? UserId { get; set; }

    public ApplicationUser? ApplicationUser { get; set; }
    public UserWithRoles? User { get; set; }
    public Dictionary<string, bool>? AllRoles { get; set; }
    private IEnumerable<string>? UserRoleNames { get; set; }

    public class UserWithRoles
    {
        public string? UserName { get; set; }
    }

    protected override void OnInitialized()
    {
        ApplicationUser = UserManager.Users.FirstOrDefault(a => a.Id == UserId);

        if (ApplicationUser == null)
        {
            NavigationManager.NavigateTo("/admin/users", true);
        } 
        else
        {
            User = new UserWithRoles { UserName = ApplicationUser?.UserName };
            UserRoleNames = ProjectRoleService.GetUserRoleNames(UserId!);

            AllRoles = ProjectRoleService.GetAllRoles().ToDictionary(
                role => role.Name ?? throw new Exception($"An IdentityRole exists without a name - id:{role.Id}"),
                role => false);
            if (UserRoleNames.Any())
                foreach (var key in AllRoles.Keys)
                    AllRoles[key] = UserRoleNames.Contains(key);
        }
    }

    public void ToggleRole(string role)
    {
        ProjectRole? projectRole = ProjectRoleService.GetRole(role);

        if (projectRole == null)
            NavigationManager.Refresh(true);

        if (UserRoleNames!.Contains(role))
            ProjectRoleService.RemoveRoleFromUser(UserId!, role);
        else
            ProjectRoleService.AddRoleToUser(UserId!, role);

        UserRoleNames = ProjectRoleService.GetUserRoleNames(UserId!);
    }
}
