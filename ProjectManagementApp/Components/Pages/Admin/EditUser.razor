@page "/admin/users/{UserId}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using ProjectManagementApp.Data
@attribute [Authorize]
@inject ApplicationDbContext DbContext;
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager


<PageTitle>Edit User</PageTitle>

<MudText Typo="Typo.h1" Class="px-6">Edit User</MudText>

<MudPaper Class="pa-8">
    <MudText Typo="Typo.h2" Class="py-8">Details</MudText>
    <MudText Typo="Typo.body1" Class="pa-4">@User?.UserName</MudText>

    <MudText Typo="Typo.h2" Class="py-4">Roles</MudText>
    <MudList T="string">
        @if (AllRoles != null)
        {
            @foreach (string key in AllRoles?.Keys!)
            {
                <MudCheckBox @onclick="@(() => ToggleRole(key))" @bind-Value="AllRoles[key]" Color="Color.Primary">@key</MudCheckBox>
            }
        }
    </MudList>
</MudPaper>


@code {
    [Parameter]
    public string? UserId { get; set; }

    public ApplicationUser? ApplicationUser { get; set; }
    public UserWithRoles? User { get; set; }
    public Dictionary<string, bool>? AllRoles { get; set; }
    private IEnumerable<string>? UserRoleNames { get; set; }

    public class UserWithRoles
    {
        public string? UserName { get; set; }
        public IEnumerable<ProjectRole>? Roles { get; set; }
    }

    protected override void OnInitialized()
    {
        ApplicationUser = UserManager.Users.FirstOrDefault(a => a.Id == UserId);

        if (ApplicationUser == null)
        {
            NavigationManager.NavigateTo("/admin/users", true);
        } 
        else
        {
            User = new UserWithRoles { UserName = ApplicationUser?.UserName };

            var userRoleIds = DbContext.ProjectUserRoles.Where(r => r.UserId == UserId).Select(r => r.RoleId);
            IEnumerable<ProjectRole> projectRoles;

            if (userRoleIds.Count() == 0)
            {
                User.Roles = new List<ProjectRole>();
                UserRoleNames = new List<string>();
            }
            else
            {
                projectRoles = DbContext.ProjectRoles.Where(r => userRoleIds.Contains(r.Id));
                User.Roles = projectRoles;
                UserRoleNames = projectRoles.Select(r => r.Name);
            }

            AllRoles = DbContext.ProjectRoles.ToDictionary(
                role => role.Name ?? throw new Exception($"An IdentityRole exists without a name - id:{role.Id}"),
                role => false);

            foreach (var key in AllRoles.Keys)
                AllRoles[key] = UserRoleNames.Contains(key);
        }
    }

    public void ToggleRole(string role)
    {
        ProjectRole? projectRole = DbContext.ProjectRoles.FirstOrDefault(r => r.Name == role);

        if (projectRole == null)
            NavigationManager.Refresh(true);

        if (UserRoleNames!.Contains(role))
        {
            ProjectUserRole? projectUserRole = DbContext.ProjectUserRoles.FirstOrDefault(r => r.RoleId == projectRole!.Id && r.UserId == UserId!);

            if (projectUserRole != null)
                DbContext.ProjectUserRoles.Remove(projectUserRole);
        }
        else
        {
            DbContext.ProjectUserRoles.Add(new ProjectUserRole { UserId = UserId!, RoleId = projectRole!.Id });
        }
        DbContext.SaveChanges();

        var userRoleIds = DbContext.ProjectUserRoles.Where(r => r.UserId == UserId).Select(r => r.RoleId);
        User!.Roles = DbContext.ProjectRoles.Where(r => userRoleIds.Contains(r.Id));
    }
}
